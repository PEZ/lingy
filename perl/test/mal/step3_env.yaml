- say: Testing REPL_ENV
  mal: (+ 1 2)
  out: 3

- mal: (/ (- (+ 5 (* 2 3)) 3) 4)
  out: 2


- say: Testing def!
  mal: (def! x 3)
  out: x

- mal: x
  out: 3

- mal: (def! x 4)
  out: x

- mal: x
  out: 4

- mal: (def! y (+ 1 7))
  out: y

- mal: y
  out: 8

- say: Verifying symbols are case-sensitive
  mal: (def! mynum 111)
  out: mynum

- mal: (def! MYNUM 222)
  out: MYNUM

- mal: mynum
  out: 111

- mal: MYNUM
  out: 222

- say: Check env lookup non-fatal error
  mal: (abc 1 2 3)
  err: 'Error: Unable to resolve symbol: abc in this context'

- say: Check that error aborts def!
  mal:
  - (def! w 123)
  - (def! w (abc))
  - w
  out: 123
  eok: true

- say: Testing let*
  mal: (let* (z 9) z)
  out: 9

- mal: (let* (x 9) x)
  out: 9

- mal: x
  out: 4

- mal: (let* (z (+ 2 3)) (+ 1 z))
  out: 6

- mal: (let* (p (+ 2 3) q (+ 2 p)) (+ p q))
  out: 12

- mal:
  - (def! y (let* (z 7) z))
  - y
  out: 7

- say: Testing outer environment
  mal: (def! a 4)
  out: a

- mal: (let* (q 9) q)
  out: 9

- mal: (let* (q 9) a)
  out: 4

- mal: (let* (z 2) (let* (q 9) a))
  out: 4

# -------- Deferrable Functionality --------

- say: Testing let* with vector bindings
  mal: (let* [z 9] z)
  out: 9

- mal: (let* [p (+ 2 3) q (+ 2 p)] (+ p q))
  out: 12

- say: Testing vector evaluation
  mal: (let* (a 5 b 6) [3 4 a [b 7] 8])
  out: '[3 4 5 [6 7] 8]'

# -------- Optional Functionality --------

- say: Check that last assignment takes priority
  mal: (let* (x 2 x 3) x)
  out: 3
