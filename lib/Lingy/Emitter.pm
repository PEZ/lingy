package Lingy::Emitter;
use Lingy::Base;
use Lingy;

use constant emit_module_foot => "\n";
use constant emit_class_foot => "\n";
use constant emit_method_foot => "\n";

sub emit {
    my ($self, $ast) = @_;
    my $out = $self->emit_module_head($ast);
    for my $class (@{$ast->{module}{class}}) {
        $out .= $self->emit_class($class);
    }
    $out .= $self->emit_module_foot;
    $out =~ s/\s*\z/\n/;
    return $out;
}

sub emit_class {
    my ($self, $class) = @_;

    my $name = $class->{name};
    my $out = $self->emit_class_head($name, $class);
    for my $name (@{$class->{method}}) {
        my $body = $class->stash->{$name};
        $out .= $self->emit_method($name, $body);
    }
    $out .= $self->emit_class_foot($class);
    return $out;
}

sub emit_method {
    my ($self, $name, $body) = @_;
    my $out = $self->emit_method_head($name, $body);
    for my $statement (@{$body->{code}}) {
        $out .= $self->emit_statement($statement);
    }
    $out .= $self->emit_method_foot($name, $body);
    return $out;
}

sub emit_module_head {
    my ($self, $name, $body) = @_;
    "# Generated by Lingy $Lingy::VERSION\n";
}

1;
