package Lingy::Emitter::Perl5;
use Lingy::Base;
extends 'Lingy::Emitter';

use constant INTRO => <<'...';
# Generated by Lingy 0.0.1
use strict; use warnings; use utf8;

...

use constant OUTRO => <<'...';
1;
...

sub emit {
    my ($self, $ast) = @_;
    my $out = INTRO;
    for my $class (@{$ast->{module}{class}}) {
        $out .= $self->emit_class($class);
    }
    $out .= OUTRO;
    return $out;
}

sub emit_class {
    my ($self, $class) = @_;
    my $out = <<"...";
package $class->{name};
use Moose;

...
    for my $name (@{$class->{method}}) {
        my $method = $class->stash->{$name};
        $out .= $self->emit_method($name, $method);
    }
    return $out;
}

sub emit_method {
    my ($self, $name, $method) = @_;
    my $arg_list = join ', ', map {
        my ($var, $type) = each %$_;
        "\$$var";
    } @{$method->args};
    $arg_list = ", $arg_list" if $arg_list;
    my $out = <<"...";
sub $name {
    my (\$self$arg_list) = \@_;
...
    for my $statement (@{$method->{code}}) {
        $out .= $self->emit_statement($statement);
    }
    $out .= <<'...';
}

...
    return $out;
}

sub emit_statement {
    qq{    print(('Hello ' . \$name) . "\\n");\n};
}

1;

